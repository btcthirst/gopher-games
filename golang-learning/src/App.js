import React, { useState, useEffect } from 'react';
import { Trophy, Star, Target, Zap, Award, CheckCircle, Circle, Lock } from 'lucide-react';

const GolangLearningPath = () => {
  const [completedLevels, setCompletedLevels] = useState(() => {
    const saved = localStorage.getItem('golangProgress');
    return saved ? JSON.parse(saved) : {};
  });
  
  const [totalXP, setTotalXP] = useState(() => {
    const saved = localStorage.getItem('golangXP');
    return saved ? parseInt(saved) : 0;
  });

  useEffect(() => {
    localStorage.setItem('golangProgress', JSON.stringify(completedLevels));
  }, [completedLevels]);

  useEffect(() => {
    localStorage.setItem('golangXP', totalXP.toString());
  }, [totalXP]);

  const levels = [
    {
      id: 1,
      title: "üéÆ –†—ñ–≤–µ–Ω—å 1: –ù–æ–≤–∞—á–æ–∫",
      subtitle: "–ü–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ —É —Å–≤—ñ—Ç—ñ Go",
      xp: 500,
      color: "bg-green-500",
      tasks: [
        { id: "1-1", name: "–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Go —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ IDE", xp: 50, type: "setup" },
        { id: "1-2", name: "Hello World - –ø–µ—Ä—à–∞ –ø—Ä–æ–≥—Ä–∞–º–∞", xp: 50, type: "code" },
        { id: "1-3", name: "–ó–º—ñ–Ω–Ω—ñ —Ç–∞ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö", xp: 100, type: "theory" },
        { id: "1-4", name: "–û–ø–µ—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ –≤–∏—Ä–∞–∑–∏", xp: 100, type: "theory" },
        { id: "1-5", name: "–£–º–æ–≤–∏ (if/else, switch)", xp: 100, type: "code" },
        { id: "1-6", name: "–¶–∏–∫–ª–∏ (for, range)", xp: 100, type: "code" },
      ],
      challenge: "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ",
      bonus: 100
    },
    {
      id: 2,
      title: "‚öîÔ∏è –†—ñ–≤–µ–Ω—å 2: –£—á–µ–Ω—å",
      subtitle: "–û—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
      xp: 800,
      color: "bg-blue-500",
      tasks: [
        { id: "2-1", name: "–§—É–Ω–∫—Ü—ñ—ó —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏", xp: 100, type: "theory" },
        { id: "2-2", name: "–ú–Ω–æ–∂–∏–Ω–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å", xp: 100, type: "code" },
        { id: "2-3", name: "–ú–∞—Å–∏–≤–∏ —Ç–∞ —Å–ª–∞–π—Å–∏", xp: 150, type: "theory" },
        { id: "2-4", name: "–ú–∞–ø–∏ (maps)", xp: 150, type: "theory" },
        { id: "2-5", name: "–°—Ç—Ä—É–∫—Ç—É—Ä–∏ (structs)", xp: 150, type: "code" },
        { id: "2-6", name: "–ú–µ—Ç–æ–¥–∏", xp: 150, type: "code" },
      ],
      challenge: "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ (CRUD)",
      bonus: 150
    },
    {
      id: 3,
      title: "üõ°Ô∏è –†—ñ–≤–µ–Ω—å 3: –ú–∞–π—Å—Ç–µ—Ä",
      subtitle: "–ü–æ–≥–ª–∏–±–ª–µ–Ω–µ –≤–∏–≤—á–µ–Ω–Ω—è",
      xp: 1200,
      color: "bg-purple-500",
      tasks: [
        { id: "3-1", name: "–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏", xp: 200, type: "theory" },
        { id: "3-2", name: "–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫", xp: 150, type: "code" },
        { id: "3-3", name: "–ü–∞–∫–µ—Ç–∏ —Ç–∞ –º–æ–¥—É–ª—ñ", xp: 200, type: "theory" },
        { id: "3-4", name: "–ü–æ–∫–∞–∂—á–∏–∫–∏", xp: 150, type: "theory" },
        { id: "3-5", name: "Defer, panic, recover", xp: 200, type: "code" },
        { id: "3-6", name: "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è (testing)", xp: 300, type: "code" },
      ],
      challenge: "REST API –¥–ª—è Todo-–¥–æ–¥–∞—Ç–∫—É –∑ —Ç–µ—Å—Ç–∞–º–∏",
      bonus: 200
    },
    {
      id: 4,
      title: "üî• –†—ñ–≤–µ–Ω—å 4: –ï–∫—Å–ø–µ—Ä—Ç",
      subtitle: "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ñ—Å—Ç—å —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
      xp: 1500,
      color: "bg-orange-500",
      tasks: [
        { id: "4-1", name: "–ì–æ—Ä—É—Ç–∏–Ω–∏ (goroutines)", xp: 250, type: "theory" },
        { id: "4-2", name: "–ö–∞–Ω–∞–ª–∏ (channels)", xp: 250, type: "code" },
        { id: "4-3", name: "Select statement", xp: 200, type: "code" },
        { id: "4-4", name: "Sync –ø–∞–∫–µ—Ç (Mutex, WaitGroup)", xp: 250, type: "theory" },
        { id: "4-5", name: "Context –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –≥–æ—Ä—É—Ç–∏–Ω", xp: 250, type: "code" },
        { id: "4-6", name: "–ü–∞—Ç—Ç–µ—Ä–Ω–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—ñ", xp: 300, type: "code" },
      ],
      challenge: "–í–µ–±-–∫—Ä–∞—É–ª–µ—Ä –∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é",
      bonus: 300
    },
    {
      id: 5,
      title: "üåü –†—ñ–≤–µ–Ω—å 5: –ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä",
      subtitle: "–í–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö",
      xp: 2000,
      color: "bg-red-500",
      tasks: [
        { id: "5-1", name: "HTTP —Å–µ—Ä–≤–µ—Ä (net/http)", xp: 300, type: "code" },
        { id: "5-2", name: "–†–æ—É—Ç–∏–Ω–≥ —Ç–∞ –º—ñ–¥–ª–≤–∞—Ä–∏", xp: 300, type: "code" },
        { id: "5-3", name: "–†–æ–±–æ—Ç–∞ –∑ JSON", xp: 200, type: "theory" },
        { id: "5-4", name: "SQL —Ç–∞ database/sql", xp: 300, type: "code" },
        { id: "5-5", name: "ORM (GORM)", xp: 300, type: "code" },
        { id: "5-6", name: "–ú—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î", xp: 200, type: "code" },
        { id: "5-7", name: "JWT –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è", xp: 400, type: "code" },
      ],
      challenge: "–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –±–ª–æ–≥ –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é —Ç–∞ –ë–î",
      bonus: 400
    },
    {
      id: 6,
      title: "üëë –†—ñ–≤–µ–Ω—å 6: –õ–µ–≥–µ–Ω–¥–∞",
      subtitle: "–ü—Ä–æ—Å—É–Ω—É—Ç—ñ —Ç–µ–º–∏",
      xp: 2500,
      color: "bg-yellow-500",
      tasks: [
        { id: "6-1", name: "–†–µ—Ñ–ª–µ–∫—Å—ñ—è (reflection)", xp: 300, type: "theory" },
        { id: "6-2", name: "Generics (–¥–∂–µ–Ω–µ—Ä—ñ–∫–∏)", xp: 300, type: "code" },
        { id: "6-3", name: "–ü—Ä–æ—Ñ—ñ–ª—é–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", xp: 400, type: "code" },
        { id: "6-4", name: "gRPC —Ç–∞ Protocol Buffers", xp: 400, type: "code" },
        { id: "6-5", name: "–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å–∏", xp: 500, type: "theory" },
        { id: "6-6", name: "Docker —Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—è", xp: 300, type: "setup" },
        { id: "6-7", name: "CI/CD –¥–ª—è Go –ø—Ä–æ—î–∫—Ç—ñ–≤", xp: 300, type: "setup" },
      ],
      challenge: "–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –∑ 3+ —Å–µ—Ä–≤—ñ—Å—ñ–≤",
      bonus: 500
    },
    {
      id: 7,
      title: "üíé –†—ñ–≤–µ–Ω—å 7: –ì—Ä–∞–Ω–¥-–ú–∞–π—Å—Ç–µ—Ä",
      subtitle: "Production-ready —Ä–æ–∑—Ä–æ–±–∫–∞",
      xp: 3000,
      color: "bg-indigo-600",
      tasks: [
        { id: "7-1", name: "–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥", xp: 400, type: "code" },
        { id: "7-2", name: "–†–æ–∑–ø–æ–¥—ñ–ª–µ–Ω—ñ —Å–∏—Å—Ç–µ–º–∏", xp: 500, type: "theory" },
        { id: "7-3", name: "Message queues (RabbitMQ/Kafka)", xp: 500, type: "code" },
        { id: "7-4", name: "–ö–µ—à—É–≤–∞–Ω–Ω—è (Redis)", xp: 400, type: "code" },
        { id: "7-5", name: "WebSockets —Ç–∞ real-time", xp: 400, type: "code" },
        { id: "7-6", name: "–ë–µ–∑–ø–µ–∫–∞ —Ç–∞ best practices", xp: 400, type: "theory" },
        { id: "7-7", name: "Kubernetes –¥–ª—è Go –¥–æ–¥–∞—Ç–∫—ñ–≤", xp: 400, type: "setup" },
      ],
      challenge: "Production-ready –¥–æ–¥–∞—Ç–æ–∫ –∑ –ø–æ–≤–Ω–∏–º —Å—Ç–µ–∫–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π",
      bonus: 1000
    }
  ];

  const achievements = [
    { name: "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫", condition: totalXP >= 50, icon: "üéØ" },
    { name: "–ö–æ–¥-–Ω—ñ–Ω–¥–∑—è", condition: totalXP >= 500, icon: "ü•∑" },
    { name: "Go-–≥—É—Ä—É", condition: totalXP >= 2000, icon: "üßô‚Äç‚ôÇÔ∏è" },
    { name: "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä", condition: totalXP >= 5000, icon: "üèóÔ∏è" },
    { name: "–õ–µ–≥–µ–Ω–¥–∞", condition: totalXP >= 10000, icon: "üëë" },
  ];

  const toggleTask = (taskId, xpValue) => {
    setCompletedLevels(prev => {
      const isCompleted = prev[taskId];
      const newState = { ...prev, [taskId]: !isCompleted };
      
      if (!isCompleted) {
        setTotalXP(current => current + xpValue);
      } else {
        setTotalXP(current => Math.max(0, current - xpValue));
      }
      
      return newState;
    });
  };

  const resetProgress = () => {
    if (window.confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∏–Ω—É—Ç–∏ –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å?')) {
      setCompletedLevels({});
      setTotalXP(0);
      localStorage.removeItem('golangProgress');
      localStorage.removeItem('golangXP');
    }
  };

  const getTaskIcon = (type) => {
    switch(type) {
      case 'setup': return '‚öôÔ∏è';
      case 'code': return 'üíª';
      case 'theory': return 'üìö';
      default: return 'üìù';
    }
  };

  const getLevelProgress = (level) => {
    const completed = level.tasks.filter(t => completedLevels[t.id]).length;
    const total = level.tasks.length;
    return { completed, total, percentage: (completed / total) * 100 };
  };

  const isLevelUnlocked = (levelId) => {
    if (levelId === 1) return true;
    const prevLevel = levels.find(l => l.id === levelId - 1);
    const progress = getLevelProgress(prevLevel);
    return progress.percentage === 100;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-blue-400 to-purple-600 bg-clip-text text-transparent">
            üéÆ Golang Learning Quest
          </h1>
          <p className="text-xl text-gray-300">–í—ñ–¥ –Ω–æ–≤–∞—á–∫–∞ –¥–æ –ø—Ä–æ—Ñ—ñ —á–µ—Ä–µ–∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—é</p>
        </div>

        {/* XP Bar */}
        <div className="bg-slate-800 rounded-lg p-6 mb-8 shadow-2xl">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <Zap className="text-yellow-400" size={32} />
              <div>
                <div className="text-2xl font-bold">{totalXP} XP</div>
                <div className="text-sm text-gray-400">–ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Å–≤—ñ–¥</div>
              </div>
            </div>
            <button 
              onClick={resetProgress}
              className="px-4 py-2 bg-red-600 hover:bg-red-700 rounded-lg text-sm transition-colors"
            >
              –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å
            </button>
          </div>
          
          {/* Achievements */}
          <div className="flex gap-3 flex-wrap">
            {achievements.map((ach, idx) => (
              <div 
                key={idx}
                className={`px-4 py-2 rounded-full text-sm ${
                  ach.condition 
                    ? 'bg-gradient-to-r from-yellow-600 to-orange-600' 
                    : 'bg-slate-700 opacity-50'
                }`}
              >
                <span className="mr-2">{ach.icon}</span>
                {ach.name}
              </div>
            ))}
          </div>
        </div>

        {/* Levels */}
        <div className="space-y-6">
          {levels.map((level) => {
            const progress = getLevelProgress(level);
            const unlocked = isLevelUnlocked(level.id);
            
            return (
              <div 
                key={level.id} 
                className={`bg-slate-800 rounded-lg shadow-2xl overflow-hidden transition-all ${
                  !unlocked ? 'opacity-60' : ''
                }`}
              >
                <div className={`${level.color} p-6`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      {!unlocked && <Lock size={28} />}
                      <div>
                        <h2 className="text-2xl font-bold">{level.title}</h2>
                        <p className="text-white/80">{level.subtitle}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-3xl font-bold">{progress.completed}/{progress.total}</div>
                      <div className="text-sm">–∑–∞–≤–¥–∞–Ω—å</div>
                    </div>
                  </div>
                  
                  {/* Progress bar */}
                  <div className="mt-4 bg-black/20 rounded-full h-3">
                    <div 
                      className="bg-white rounded-full h-3 transition-all duration-500"
                      style={{ width: `${progress.percentage}%` }}
                    />
                  </div>
                </div>

                {unlocked && (
                  <div className="p-6">
                    <div className="space-y-3 mb-6">
                      {level.tasks.map((task) => (
                        <div 
                          key={task.id}
                          onClick={() => toggleTask(task.id, task.xp)}
                          className={`flex items-center gap-4 p-4 rounded-lg cursor-pointer transition-all ${
                            completedLevels[task.id]
                              ? 'bg-green-900/30 border-l-4 border-green-500'
                              : 'bg-slate-700 hover:bg-slate-600'
                          }`}
                        >
                          {completedLevels[task.id] ? (
                            <CheckCircle className="text-green-400 flex-shrink-0" size={24} />
                          ) : (
                            <Circle className="text-gray-500 flex-shrink-0" size={24} />
                          )}
                          <div className="flex-grow">
                            <div className="flex items-center gap-2">
                              <span>{getTaskIcon(task.type)}</span>
                              <span className={completedLevels[task.id] ? 'line-through text-gray-400' : ''}>
                                {task.name}
                              </span>
                            </div>
                          </div>
                          <div className="flex items-center gap-2 text-yellow-400 font-bold">
                            <Star size={16} />
                            {task.xp} XP
                          </div>
                        </div>
                      ))}
                    </div>

                    {/* Challenge */}
                    <div className="bg-gradient-to-r from-purple-900 to-pink-900 p-4 rounded-lg border-2 border-purple-500">
                      <div className="flex items-center gap-3 mb-2">
                        <Trophy className="text-yellow-400" size={24} />
                        <div className="font-bold text-lg">–§—ñ–Ω–∞–ª—å–Ω–∏–π —á–µ–ª–µ–Ω–¥–∂</div>
                      </div>
                      <div className="text-gray-200 mb-2">{level.challenge}</div>
                      <div className="flex items-center gap-2 text-yellow-400 font-bold">
                        <Award size={16} />
                        –ë–æ–Ω—É—Å: {level.bonus} XP
                      </div>
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>

        {/* Tips */}
        <div className="mt-12 bg-slate-800 rounded-lg p-6">
          <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
            <Target className="text-blue-400" />
            –ü–æ—Ä–∞–¥–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É
          </h3>
          <ul className="space-y-2 text-gray-300">
            <li>‚úÖ –ö–æ–¥—å—Ç–µ —â–æ–¥–Ω—è —Ö–æ—á–∞ –± 30 —Ö–≤–∏–ª–∏–Ω</li>
            <li>‚úÖ –†–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –Ω–∞ Codewars, Exercism, LeetCode</li>
            <li>‚úÖ –í–µ–¥—ñ—Ç—å —â–æ–¥–µ–Ω–Ω–∏–∫ –Ω–∞–≤—á–∞–Ω–Ω—è</li>
            <li>‚úÖ –ü—É–±–ª—ñ–∫—É–π—Ç–µ –ø—Ä–æ—î–∫—Ç–∏ –Ω–∞ GitHub</li>
            <li>‚úÖ –ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ Go —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ (Reddit, Discord)</li>
            <li>‚úÖ –ß–∏—Ç–∞–π—Ç–µ —á—É–∂–∏–π –∫–æ–¥ —Ç–∞ —Ä–æ–±—ñ—Ç—å code review</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default GolangLearningPath;
